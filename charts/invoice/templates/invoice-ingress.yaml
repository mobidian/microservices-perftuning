#  ------------------------------------------------------------
#   Copyright (c) Microsoft Corporation.  All rights reserved.
#   Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
#  ------------------------------------------------------------

###################################################################################################
# ingress
###################################################################################################
{{- $svcversion := .Chart.AppVersion | replace "." "" }}
{{- $appversion := .Chart.AppVersion }}
{{- $defaultversionedpath := printf "/%s/" $appversion }}
{{- $relname := .Release.Name }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $relname }}-ingress
  annotations:
    nginx.ingress.kubernetes.io/server-snippet: |
      location = /api/invoices {
        content_by_lua_block {

          local function retrieve_location(path, arguments)
            local cjson = require "cjson.safe"
            
            local response = ngx.location.capture(path, { method = ngx.HTTP_GET, args = arguments })

            if(response.status ~= ngx.HTTP_OK) then
              ngx.log(ngx.WARN, "Unexpected status for ", path, ": ", response.status)
              return
            end

            if(response.truncated) then
              ngx.log(ngx.WARN, "Truncated response for ", path)
              return
            end

            local payload, error = cjson.decode(response.body)

            if(error) then
              ngx.log(ngx.WARN, "Invalid payload for ", path, ": ", error)
              return
            end

            return payload
          end

          local cjson = require "cjson.safe"
          local arguments = ngx.req.get_uri_args()

          -- TODO add checks for errors on spawn
          local delivery_req = ngx.thread.spawn(retrieve_location, "/api/internal/deliveries/summary",  arguments)
          local drone_req = ngx.thread.spawn(retrieve_location, "/api/internal/dronedeliveries/utilization", arguments)
          local packages_req = ngx.thread.spawn(retrieve_location, "/api/internal/packages/summary", arguments)

          -- TODO add checks for errors on wait
          local delivery_ok, delivery_resp = ngx.thread.wait(delivery_req)
          local drone_ok, drone_resp = ngx.thread.wait(drone_req)
          local drone_ok, packages_resp = ngx.thread.wait(packages_req)

          local result = { 
            deliveries = delivery_resp,
            drones = drone_resp,
            packages = packages_resp
          }

          ngx.say(cjson.encode(result))
        }
      }
spec:
  {{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.hosts }}
  {{- if .tls }}
  - hosts:
    - {{ .name }}
    secretName: {{ $relname }}-{{ .tlsSecretName }}
  {{- end }}
  {{- end }}
  {{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
  - host: {{ .name }}
    http:
      paths:
      {{ if .path }}
      - path: {{ printf "%s/%s/" .path $appversion }}api/ignored
      {{ else }}
      - path: {{ $defaultversionedpath }}api/ignored
      {{ end }}
        backend:
          serviceName: "ignored"
          servicePort: http
  {{ end }}
